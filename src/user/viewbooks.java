/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package user;

import auth.*;
import auth.*;
import javax.swing.JOptionPane;

public class viewbooks extends javax.swing.JFrame {

    /**
     * Creates new form login
     */
    public viewbooks() {
        initComponents();
        loadAvailableBooks();
    }

    private void loadAvailableBooks() {
        try {
            config.dbConnect db = new config.dbConnect();
            String query = "SELECT BookID, Title, Author, ISBN, CopiesAvailable FROM book WHERE CopiesAvailable > 0";
            java.sql.ResultSet rs = db.getData(query);

            String[] columns = {"BookID", "Title", "Author", "ISBN", "Copies Available"};
            javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel(columns, 0);

            while (rs.next()) {
                int bookId = rs.getInt("BookID");
                String title = rs.getString("Title");
                String author = rs.getString("Author");
                String isbn = rs.getString("ISBN");
                int copies = rs.getInt("CopiesAvailable");

                Object[] row = {bookId, title, author, isbn, copies};
                model.addRow(row);
            }
            bookstable.setModel(model);
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Failed to load available books: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        backbutton = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookstable = new javax.swing.JTable();
        borrowbook = new javax.swing.JButton();
        Background = new javax.swing.JLabel();

        jFormattedTextField1.setText("jFormattedTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(52, 73, 94));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Available Books");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 500, 50));

        backbutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/backicon.png"))); // NOI18N
        backbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backbuttonMouseClicked(evt);
            }
        });
        jPanel2.add(backbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 70, 60));

        bookstable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(bookstable);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 750, -1));

        borrowbook.setBackground(new java.awt.Color(255, 255, 255));
        borrowbook.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        borrowbook.setForeground(new java.awt.Color(0, 0, 0));
        borrowbook.setText("Borrow");
        borrowbook.setBorder(null);
        borrowbook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrowbookActionPerformed(evt);
            }
        });
        jPanel2.add(borrowbook, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 120, 30));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 830, 560));

        Background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Background.png"))); // NOI18N
        jPanel1.add(Background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 600));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backbuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backbuttonMouseClicked
        new userdashboard().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backbuttonMouseClicked

    private void borrowbookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrowbookActionPerformed
        int selectedRow = bookstable.getSelectedRow();
        if (selectedRow == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a book to borrow.");
            return;
        }
        try {
            config.dbConnect db = new config.dbConnect();
            config.usersession session = config.usersession.getInstance();
            int userId = session.getId();

            int bookId = (int) bookstable.getValueAt(selectedRow, 0);
            String title = (String) bookstable.getValueAt(selectedRow, 1);
            String author = (String) bookstable.getValueAt(selectedRow, 2);
            String isbn = (String) bookstable.getValueAt(selectedRow, 3);
            int copiesAvailable = (int) bookstable.getValueAt(selectedRow, 4);

            if (copiesAvailable <= 0) {
                javax.swing.JOptionPane.showMessageDialog(this, "Selected book is not available.");
                return;
            }

            // Borrow date and return date can be set here or via user input; for now, set borrow date as today and return date 14 days later
            java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd");
            java.util.Date today = new java.util.Date();
            String borrowDate = sdf.format(today);
            java.util.Calendar c = java.util.Calendar.getInstance();
            c.setTime(today);
            c.add(java.util.Calendar.DATE, 14);
            String returnDate = sdf.format(c.getTime());

            // Insert borrow record with status 'Pending'
            String insertSql = "INSERT INTO borrow (UserID, BookID, BorrowDate, ReturnDate, Status) VALUES ("
                    + userId + ", " + bookId + ", '" + borrowDate + "', '" + returnDate + "', 'Pending')";
            int result = db.InsertData(insertSql);
            if (result == 1) {
                // Decrease copies available in book table by 1
                String updateBookSql = "UPDATE book SET CopiesAvailable = CopiesAvailable - 1 WHERE BookID = " + bookId;
                db.InsertData(updateBookSql);

                // Query the borrow record details to load receipt data
                String query = "SELECT CONCAT(u.FirstName, ' ', u.LastName) as borrowerName, u.Email as email, u.Phone as phone, u.Address as address, " +
                               "b.Title as bookTitle, b.Author as author, b.ISBN as isbn, br.BorrowDate as borrowDate, " +
                               "br.ReturnDate as returnDate, br.Status as status " +
                               "FROM borrow br " +
                               "JOIN user u ON br.UserID = u.UserID " +
                               "JOIN book b ON br.BookID = b.BookID " +
                               "WHERE br.BorrowID = (SELECT MAX(BorrowID) FROM borrow WHERE UserID = " + userId + ")";

                java.sql.ResultSet rs = db.getData(query);
                if (rs.next()) {
                    utils.BorrowRecord record = new utils.BorrowRecord(
                        rs.getString("borrowerName"),
                        rs.getString("email"),
                        rs.getString("phone"),
                        rs.getString("address"),
                        rs.getString("bookTitle"),
                        rs.getString("author"),
                        rs.getString("isbn"),
                        rs.getString("borrowDate"),
                        rs.getString("returnDate"),
                        rs.getString("status")
                    );
                    utils.receipt receiptWindow = new utils.receipt();
                    receiptWindow.setReceiptFromModel(record);
                    receiptWindow.setVisible(true);
                } else {
                    javax.swing.JOptionPane.showMessageDialog(this, "Failed to load receipt details.");
                }

                // Refresh book list
                loadAvailableBooks();
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Failed to borrow book. Please try again.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Error occurred during borrowing: " + e.toString());
        }
    }//GEN-LAST:event_borrowbookActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(viewbooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(viewbooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(viewbooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewbooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new viewbooks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Background;
    private javax.swing.JLabel backbutton;
    private javax.swing.JTable bookstable;
    private javax.swing.JButton borrowbook;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
